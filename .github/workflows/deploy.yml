name: Deploy Next.js to Oracle VM

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to Oracle VM
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            cd /home/ubuntu/your_project
            git pull origin main
            npm install
            npm run build
            pm2 restart nextjs || pm2 start npm --name "nextjs" -- run start

      - name: Notify Discord
        if: always()
        run: |
          curl -H "Content-Type: application/json" \
               -X POST \
               -d '{
                 "username": "Deploy Bot",
                 "content": "🚀 **[Oracle VM 배포 완료]**\n▫ 브랜치: ${{ github.ref_name }}\n▫ 커밋: ${{ github.sha }}\n▫ 작성자: ${{ github.actor }}"
               }' \
               ${{ secrets.DISCORD_WEBHOOK }}

      - name: Notify QA Results
        if: always()
        run: |
          QA_RESULT="✅ Lint 통과\n✅ Unit Test 통과"
          curl -X POST ${{ secrets.DISCORD_WEBHOOK_QA }} \
            -H "Content-Type: application/json" \
            -d "{
              \"username\": \"QA Bot\",
              \"content\": \"🔍 **[QA 결과]**\n$QA_RESULT\n▫ 작성자: ${{ github.actor }}\"
            }"

      - name: Notify on Deploy Failure
        if: failure()
        run: |
          curl -X POST ${{ secrets.DISCORD_WEBHOOK_FAILURE }} \
            -H "Content-Type: application/json" \
            -d '{
              "username": "Deploy Bot",
              "content": "🚨 **[배포 실패]**\n▫ 브랜치: `${{ github.ref_name }}`\n▫ 커밋: `${{ github.sha }}`\n▫ 작성자: `${{ github.actor }}`"
            }'

      - name: Restore .env.production on server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            echo "${{ secrets.DISCORD_ENV_B64 }}" | base64 -d > /home/ubuntu/your_project/.env.production

      - name: 기록을 Airtable에 저장
        env:
          AIRTABLE_TOKEN: ${{ secrets.AIRTABLE_TOKEN }}
        shell: bash
        run: |
          DATE=$(date "+%Y-%m-%dT%H:%M:%S")
          cat <<EOF | curl -X POST "https://api.airtable.com/v0/app3A3wNTuBjyz8LM/DeployHistory" \
            -H "Authorization: Bearer $AIRTABLE_TOKEN" \
            -H "Content-Type: application/json" \
            --data @-
{
  "fields": {
    "Date": "$DATE",
    "Author": "${{ github.actor }}",
    "Branch": "${{ github.ref_name }}",
    "Commit": "${{ github.sha }}",
    "QA": "통과",
    "Status": "성공"
  }
}
EOF  
