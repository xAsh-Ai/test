name: Deploy Next.js to Oracle VM

on:
  pull_request:
    branches:
      - main
    types: [closed]  # PR이 종료되었을 때만 실행

jobs:
  deploy:
    if: github.event.pull_request.merged == true  # 머지된 PR만 실행
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to Oracle VM
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            cd /home/ubuntu/your_project
            git pull origin main
            npm install
            npm run build
            pm2 restart nextjs || pm2 start npm --name "nextjs" -- run start

      - name: Notify Discord (Country-based)
        if: always()
        run: |
          ACTOR="${{ github.actor }}"
          MESSAGE="🚀 **[Oracle VM 배포 완료]**\n▫ 브랜치: main\n▫ 커밋: ${{ github.sha }}\n▫ 작성자: $ACTOR"

          if [[ "$ACTOR" == vn-* ]]; then
            WEBHOOK="${{ secrets.DISCORD_WEBHOOK_VN }}"
          elif [[ "$ACTOR" == in-* ]]; then
            WEBHOOK="${{ secrets.DISCORD_WEBHOOK_IN }}"
          else
            WEBHOOK="${{ secrets.DISCORD_WEBHOOK }}"
          fi

          curl -X POST $WEBHOOK \
            -H "Content-Type: application/json" \
            -d "{
              \"username\": \"Deploy Bot\",
              \"content\": \"$MESSAGE\"
            }"

      - name: Notify QA Results
        if: always()
        run: |
          QA_RESULT="✅ Lint 통과\n✅ Unit Test 통과"
          curl -X POST ${{ secrets.DISCORD_WEBHOOK_QA }} \
            -H "Content-Type: application/json" \
            -d "{
              \"username\": \"QA Bot\",
              \"content\": \"🔍 **[QA 결과]**\n$QA_RESULT\n▫ 작성자: ${{ github.actor }}\"
            }"

      - name: Notify on Deploy Failure
        if: failure()
        run: |
          curl -X POST ${{ secrets.DISCORD_WEBHOOK_FAILURE }} \
            -H "Content-Type: application/json" \
            -d '{
              "username": "Deploy Bot",
              "content": "🚨 **[배포 실패]**\n▫ 브랜치: main\n▫ 커밋: ${{ github.sha }}\n▫ 작성자: ${{ github.actor }}"
            }'

      - name: Restore .env.production on server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            echo "${{ secrets.DISCORD_ENV_B64 }}" | base64 -d > /home/ubuntu/your_project/.env.production

      - name: 기록을 Airtable에 저장
        env:
          AIRTABLE_TOKEN: ${{ secrets.AIRTABLE_TOKEN }}
          GIT_AUTHOR: ${{ github.actor }}
          GIT_BRANCH: main
          GIT_SHA: ${{ github.sha }}
        run: |
          DATE=$(date -u +"%Y-%m-%dT%H:%M:%S.000Z")
          cat <<EOF | curl -X POST "https://api.airtable.com/v0/app3A3wNTuBjyz8LM/DeployHistory" \
            -H "Authorization: Bearer $AIRTABLE_TOKEN" \
            -H "Content-Type: application/json" \
            --data @-
          {
            "fields": {
              "Date": "$DATE",
              "Author": "$GIT_AUTHOR",
              "Branch": "$GIT_BRANCH",
              "Commit": "$GIT_SHA",
              "QA": "통과",
              "Status": "성공"
            }
          }
          EOF
